/**
 * Title: A new IDP source file
 * Author: bartb
 */

include "../oplossing/solution.idp" //TODO Replace this with the path to your solution
include "../vis/visprocedures.idp" 
include <mx> 
include <table_utils>
include "instances.idp"




procedure main(){
	print("Possible methods to call are:")
	print(" visualiseSome()", "searches for some solutions to your theory with specific properties and visualises them.	")
	print(" visualiseModels(n)", "searches for n models to your problem and visualises them .	")
	print(" playInteractive()", "Lets you play interactively according to the rules described in your theory.	")
	print(" check()", "performs some checks on your theory and reports about correctness.")
	playInteractive()
}

procedure visualiseSome(){
	myTheo = merge(PacmanTheory, TimeTheory)
	winning = merge(myTheo, winner)
	losing = merge(myTheo, loser)
	justlosing = merge(myTheo, justloser)
	stdoptions.nbmodels=1
	winmodel = modelexpand(winning,small)[1]
	lose = modelexpand(losing,small)[1]
	justlose = modelexpand(justlosing,small)[1]
	if winmodel == nil then
		print("cannot win")
	else
		visualise(winmodel)
	end
	if lose == nil then
		print("cannot lose")
	else
		visualise(lose)
	end
	if justlose == nil then
		print("cannot lose at the last time point")
	else
		visualise(justlose)
	end
	
	
}

procedure visualiseModels(n){
	myTheo = merge(PacmanTheory, TimeTheory)
	stdoptions.nbmodels=n
	models = modelexpand(myTheo,small)
	if #models == 0 then
		print("Sorry,no models")
		printcore(myTheo,small)
	end	
	for i =1,#models do
		visualise(models[i])
	end
	
	
		
}

procedure playInteractive(){
	// os.execute("wmctrl -r :ACTIVE: -N MyTerminal") 
	//IF YOU have wmcrtrl installed, use the above to set your cursor at the correct position
	io.stdout:setvbuf("no")
	io.stderr:setvbuf("no")
	l="nl"
	structure=huge
	stdoptions.nbmodels=25
	os.execute("killall idpdraw -9 -q")
	possStrucs, bt, it, bv, iv = initialise(PacmanTheory, structure,PacmanVoc::time.type, PacmanVoc::Start, PacmanVoc::Next)
	possStrucs=permute(possStrucs)
	print(message("welcome",l))
	struc = possStrucs[1]
	while true do
		possStrucs=permute(possStrucs,iv)
		os.execute("killall idpdraw -9 -q")
		visualiseNoTime(struc)
		print(message("next",l))
		print(message("command",l),message("value",l))
		print("0"," ",message("stop",l))
		left=-1; right=-1; up=-1; down=-1;
		for i=1,#possStrucs do
			if valueofmove(possStrucs[i],structure)=="l" then left=i end	
			if valueofmove(possStrucs[i],structure)=="d" then down=i end
			if valueofmove(possStrucs[i],structure)=="r" then right=i end
			if valueofmove(possStrucs[i],structure)=="u" then up=i end
		end
		if left~=-1 then print("1", "", message("l",l)) end
		if down~=-1 then print("2", "", message("d",l)) end
		if right~=-1 then print("3", "", message("r",l)) end
		if up~=-1 then print("5", "", message("u",l)) end
		print(message("where",l))

		selstruc = nil;
		while true do
			inp = tonumber(io.read("*line"))
			if inp==0 then break end
			if inp==1 and left~=-1 then selstruc=possStrucs[left]; break end
			if inp==2 and down~=-1 then selstruc=possStrucs[down]; break end
			if inp==3 and right~=-1 then selstruc=possStrucs[right]; break end
			if inp==5 and up~=-1 then selstruc=possStrucs[up]; break end
			print(message("invalid",l))
		end
		if inp == 0 then
			break
		end
		print("here")
		stdoptions.language="idp"
		stdoptions.xsb=false
		stdoptions.liftedunitpropagation=false
		stdoptions.groundwithbounds=false

		possStrucs=progress(PacmanTheory,selstruc)
		struc = possStrucs[1] 
	end
	os.execute("killall idpdraw -9 -q")
}

procedure valueofmove(input, S1){
	m= iv::Move
	movetab = totable(input[m].ct)
	for i = 1,#movetab do
		if movetab[i][1] == "p" then 
			return movetab[i][2]
		end
	end
}
	
procedure permute(tab){
  local n = #tab
  for i = 1, n do
    local j = math.random(i, n)
    tab[i], tab[j] = tab[j], tab[i]
  end
  return tab
}

procedure check(){
	checkStrucs()
}

procedure message(m,lang){
	messages={
		{"code","en","nl"},
		{"welcome","Welcome to the PacMan simulator","Welkom bij de PacMan simulator"},
		{"next","Next step, choose an option please, here are the possible values","Volgende stap, kies een optie aub. Hier zijn de mogelijke waarden"},
		{"command","Command:","Commando:"},
		{"value","Value","Waarde"},
		{"stop","Stop","Stop"},
		{"l","Left","Links"},
		{"r","Right","Rechts"},
		{"u","Up","Boven"},
		{"d","Down","Onder"},
		{"where","Where do you want to go?","Waarheen wil je gaan?"},
		{"invalid","Invalid value, please try again.","Ongeldige waarde, probeer aub opnieuw."}
	}
	local langs=messages[1]
	local num = 0
	for i = 2,#langs do
		if langs[i] == lang then
			num = i
			break
		end
	end
	if num == 0 then
		print("Unsupported language",lang)
	end
	for i = 2,#messages do
		if m == messages[i][1] then
			return messages[i][num]
		end
	end
	print("Unknown message",m)
}


procedure checkStrucs() {
	io.stdout:setvbuf("no")
	io.stderr:setvbuf("no")
	local strucs={
		{split, "split", 0 } ,
		{invalidGold, "invalidGold", 0}, 
		{cheater2, "cheater2", 0 } ,
		{cheater3, "cheater3", 0 } ,
		{winlose, "winlose", 0 } ,
		{win, "win", 1 } ,
		{lose, "lose", 1 } ,
		{loseCrossing, "loseCrossing", 2 } ,
	}

	myTheo = merge(PacmanTheory, TimeTheory)
	
	for i = 1, #strucs do
		local curr = strucs[i]
		local struc = curr[1]
		local name = curr[2]
		local expected = curr[3]
		stdoptions.nbmodels = expected + 1
		print("Veryfing", name)
		local models = modelexpand(myTheo, curr[1])
		if models == nil then
			modelsfound = 0
		else
		 	modelsfound = #models
		end
		if modelsfound > expected then
			print(">>>>>>> Verification failed. Found too many models for", name)
			printmodels(models)
		elseif modelsfound < expected then
			print(">>>>>>> Verification failed. Found too few models for", name)
			if modelsfound == 0 then 
				printcore(myTheo,curr[1]) 
			else
				printmodels(models)
			end
		else
			print("Verification succeeded for", name)
		end
	end
	
	


}




theory winner:PacmanVoc{
	?t:GameWon(t).
	
}
theory loser:PacmanVoc{
	?t:GameLost(t).
}

theory justloser:PacmanVoc{
	GameLost(MAX[:time]).
	~GameLost(MAX[:time]- 1).
}
