
vocabulary PacmanVoc{

	type dir //We guarantee you that dir, Left, Right, Up, Down will always be correctly interpreted in structures. You should not check this.
	Down: dir
	Left: dir
	Right: dir
	Up: dir

	type xCo isa int
	type yCo isa int

	type agent //The ghosts and pacman
	pacman:agent

	NoPos(xCo,yCo) 
	Wall(xCo,yCo,dir)


	/*Van wat hieronder staat kan een deel gegeven zijn, een deel gevraagd*/
	Gold(xCo,yCo)
	GameLost
	GameWon
	Position(agent,xCo,yCo)
	
	PreviousMove(agent,dir)
	Move(agent,dir)
	
	
	/*Eigen predicaten/functies */
	OppositeDir(dir):dir
	Transition(dir,xCo,yCo,xCo,yCo)
	Pos(xCo,yCo)
	IsWall(xCo,yCo,dir)
	Reach(xCo,yCo,xCo,yCo)
	GameEnded

}

theory PacmanTheory:PacmanVoc{
	// OppositeDirection, uitdrukken dat twee richtingen elkaars tegengestelden zijn
	OppositeDir(Left)=Right.
	OppositeDir(Up)=Down.
	!d[dir]:OppositeDir(OppositeDir(d))=d.
	
	// Transition, de relatie tussen verandering van coordinaten en richting.
	// Impliciet, wanneer er een transition bestaat, liggen twee vakjes naast elkaar.
	{
		!x1[xCo], y1[yCo], x2[xCo], y2[yCo]: Transition(Down ,x1,y1,x2,y2) <- x2=x1 & y2=-1+y1.
		!x1[xCo], y1[yCo], x2[xCo], y2[yCo]: Transition(Left ,x1,y1,x2,y2) <- x2=-1+x1 & y2=y1.
		!x1[xCo], y1[yCo], x2[xCo], y2[yCo], d[dir] : Transition(d ,x1,y1,x2,y2) <-Transition(OppositeDir(d),x2,y2,x1,y1).
	}
	
	// Pos: Een positie waar wel een vakje is
	!x[xCo],y[yCo]:Pos(x,y)<=>~NoPos(x,y).
	
	// Wall predicaat symmetrisch maken
	{
		!x[xCo],y[yCo],d[dir]: IsWall(x,y,d) <- Wall(x,y,d).
		!x2[xCo],y2[yCo],d[dir]: IsWall(x2,y2,OppositeDir(d)) <- ?x1[xCo],y1[yCo]: IsWall(x1,y1,d) & Transition(d,x1,y1,x2,y2).
	}
	

	// Alle vakjes zijn aaneengesloten
		//Reach: 2 vakjes kunnen elkaar bereiken via aaneenliggende vakjes die deel 
		//       zijn van het spel (Pos) en waar geen muur tussen staat.
	{
			// Een vakje dat deel is van het spel kan zichzelf bereiken
		! x[xCo],y[yCo] : Reach(x,y,x,y) <-Pos(x,y).
			// Een vakje kan zijn buur bereiken als ze allebei deel van het spel (Pos) zijn en er geen muur tussen staat
		! x1[xCo],y1[yCo],x2[xCo],y2[yCo] : Reach(x1,y1,x2,y2) <- ? d[dir] :Transition(d,x1,y1,x2,y2) 
																		& ~IsWall(x1,y1,d) & Pos(x1,y1) & Pos(x2,y2).		
			// Als 2 vakjes hetzelfde vakje kunnen bereiken, kunnen ze elkaar bereiken
		! x1[xCo],y1[yCo],x2[xCo],y2[yCo] : Reach(x1,y1,x2,y2) <- ?x3[xCo],y3[yCo]:Reach(x1,y1,x3,y3)&Reach(x3,y3,x2,y2).
	}
		// Alle vakjes die deel zijn van het spel (Pos) kunnen elkaar bereiken
	!x1[xCo],y1[yCo],x2[xCo],y2[yCo]:Pos(x1,y1)&Pos(x2,y2)<=>Reach(x1,y1,x2,y2).
	
	// Iedereen is op exact 1 plaats
	!a[agent]:#{x[xCo] y[yCo] : Position(a,x,y)}=1.
				
	// Niemand staat op plaatsen waar geen vakje is
	!a[agent],x[xCo],y[yCo]:Position(a,x,y)=>Pos(x,y).
	
	// Er kan enkel goud liggen op plaatsen waar een vakje is
	! x[xCo],y[yCo] : Gold(x,y) => Pos(x,y).
	
	// Niemand beweegt door muren
	! x[xCo],y[yCo],a[agent],d[dir]:(IsWall(x,y,d)&Position(a,x,y)=>~Move(a,d)).
	
	// Niemand beweegt van het bord af
	!a[agent],x1[xCo],y1[yCo],d[dir]:Position(a,x1,y1)&Move(a,d)=>?x2[xCo],y2[yCo]:Transition(d,x1,y1,x2,y2)&Pos(x2,y2).
	//!a[agent],x[xCo],y[yCo],d[dir]:Position(a,x,y)&Move(a,d)=>Pos(TransX(x,d),TransY(y,d)).
	
	// Iedereen kan hoogstens in 1 richting tegelijk bewegen
	!a[agent]:#{d[dir] : Move(a,d)} < 2.
	!a[agent]:#{d[dir] : PreviousMove(a,d)} < 2. /*in dynamisch systeem is dit geimpliceerd */
	
	// Ghosts kunnen niet omkeren
	! a[agent],d [dir], prevD[dir] : a=pacman | ( Move(a,d) & PreviousMove(a,prevD)=>~prevD=OppositeDir(d)).
	
	// Pacman laat geen goud liggen.
	!p[agent],d[dir],x1[xCo],y1[yCo],x2[xCo],y2[yCo]:p=pacman&PreviousMove(p,d)&Position(p,x2,y2)&Transition(d,x1,y1,x2,y2)
				=> ~Gold(x1,y1).

	// GameLost als een ghost op hetzelfde vakje als pacman staat
	(? x[xCo],y[yCo], a[agent]: Position(pacman,x,y) & Position(a,x,y) & ~a=pacman)<=>GameLost.
	// GameWon als al het goud op is en het spel niet verloren is
	~GameLost & ~ (? x[xCo],y[yCo] : Gold(x,y)) <=> GameWon. //Als aan de voorwaarden voor gameLost ï¿½n gameWon voldaan is, dan is het ook verloren
		
	// GameEnded: Het spel is gedaan, het is verloren of gewonnen
	GameEnded<=>GameLost|GameWon.
	
	// Afhankelijk van of het spel al gedaan is moet iedereen bewegen/mag niemand bewegen
	GameEnded<=>~?a[agent],d[dir]:Move(a,d).
	~GameEnded<=>!a[agent]:?d[dir]:Move(a,d).
	
} 