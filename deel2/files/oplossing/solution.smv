MODULE main 
	VAR 
		pacman : agent(0,4,FALSE,gameover);
		ghost : agent(2,2,TRUE,gameover);
		countDown : 0..9;
		
--		      square(pacman, ghost,x, y,   u,     d,     l,      r)
		sq1 : square(pacman, ghost,0, 1 ,FALSE ,TRUE ,TRUE ,FALSE );
 		sq2 : square(pacman, ghost,1, 1 ,TRUE ,TRUE ,FALSE ,FALSE );
 		sq3 : square(pacman, ghost,2, 1 ,FALSE ,TRUE ,FALSE ,TRUE );
 		sq4 : square(pacman, ghost,0, 2 ,FALSE ,FALSE ,TRUE ,TRUE );
 		sq5 : square(pacman, ghost,2, 2 ,FALSE ,FALSE ,TRUE ,TRUE );
 		sq6 : square(pacman, ghost,0, 3 ,FALSE ,FALSE ,TRUE ,FALSE );
 		sq7 : square(pacman, ghost,1, 3 ,FALSE ,TRUE ,FALSE ,FALSE );
 		sq8 : square(pacman, ghost,2, 3 ,TRUE ,FALSE ,FALSE ,TRUE );
 		sq9 : square(pacman, ghost,0, 4 ,TRUE ,FALSE ,TRUE ,FALSE );
 		sq10 : square(pacman, ghost,1,4 ,TRUE ,FALSE ,FALSE ,TRUE );
						
--		gameState : {WIN,LOSE,playing};

	ASSIGN
		init(countDown) := 9;
		next(countDown) := case
								0<countDown : countDown - 1;
								TRUE : 0;
							esac;
	
--		init(gameState) := playing;
--		
--		next(gameState) :=
--			case
--				pacman.x = ghost.x & pacman.y = ghost.y : LOSE;
--				!sq1.contains_coin & !sq2.contains_coin 
--				& !sq3.contains_coin & !sq4.contains_coin 
--				& !sq5.contains_coin & !sq6.contains_coin 
--				& !sq7.contains_coin & !sq8.contains_coin
--				& !sq9.contains_coin & !sq10.contains_coin : WIN;
--				TRUE : playing;
--			esac;
				
	DEFINE
		lost := (pacman.x = ghost.x) & (pacman.y = ghost.y);
		won := !lost
				& !sq1.contains_coin & !sq2.contains_coin 
				& !sq3.contains_coin & !sq4.contains_coin 
				& !sq5.contains_coin & !sq6.contains_coin 
				& !sq7.contains_coin & !sq8.contains_coin
				& !sq9.contains_coin & !sq10.contains_coin;
		gameover := won | lost;
	
	
	--Pacman is altijd op een gedefinieerde square
	LTLSPEC G (sq1.pacmanHere | sq2.pacmanHere | sq3.pacmanHere | sq4.pacmanHere | sq5.pacmanHere | 
		sq6.pacmanHere | sq7.pacmanHere | sq8.pacmanHere | sq9.pacmanHere | sq10.pacmanHere)
	
	--Vanuit elke begintoestand kan het spel zowel gewonnen als verloren worden.
	CTLSPEC !(AX lost) -> (EF won)
--	CTLSPEC (EF won)
	CTLSPEC (EF lost)
	
	--Muntjes kunnen niet terug verschijnen: als er ergens geen muntje ligt, dan zal in de toekomomst er nooit nog een muntje liggen.
	--(check dit voor 1concreet vakje)
	SPEC (!sq1.contains_coin -> AX !sq1.contains_coin)
	
	--Het is mogelijk dat pacman oneindig vaak op locatie (1;1) is terwijl het spel nog bezig is.
	CTLSPEC EG (EF (pacman.x = 1 & pacman.y = 1))
	
	--Als pacman oneindig vaak op locatie (1;1) komt en oneindig vaak op locatie (1;3) komt, dan wordt het spel nooit gewonnen.
	LTLSPEC G ((F (pacman.x = 1 & pacman.y = 1)) & (F (pacman.x = 1 & pacman.y = 3))) -> G !won
	
	--Eens het spel verloren of gewonnen is, blijft het spel in deze toestand.
--	CTLSPEC AG (won -> AX won)
	LTLSPEC (X won -> won)
	CTLSPEC AG (lost -> AX lost)
	
	--Er zijn minstens 10 tijdstappen nodig om het spel te winnen
--	CTLSPEC AG ( won -> countDown = 0)
	LTLSPEC G ( won -> countDown = 0)
	
	
	
--Represents a "walking object"
-- it has a startposition (given by startX and startY), 
-- a boolean isGhost that is true if this agent is a ghost, 
-- and it knows whether the game is over (boolean gameover)
MODULE agent(startX,startY,isGhost,gameover)
	VAR
		x : 0..4;
		y : 0..4;
		direction : {up, down, left, right};
	
	ASSIGN
		init(x) := startX;
		init(y) := startY;
		
		next(x):=
			case
				gameover : x;
				direction = left & 0 < x: (x - 1);
				direction = right & x < 4 : (x + 1);
				TRUE: x;
			esac;
			
		next(y):=
			case
				gameover : y;
				direction = up & y < 4: (y + 1);
				direction = down & 0 < y: (y - 1);
				TRUE: y;
			esac;
			
		next(direction):=
			case
				isGhost & direction = up : {down, left, right};
				isGhost & direction = down : {up,left,right};
				isGhost & direction = left : {up,down,right};
				isGhost & direction = right : {up,down,left};
				TRUE : {up, down, left, right};
			esac;
				
		

	

--Represents a square
--u, d, l and r are booleans representing whether or not there is a wall in that specific direction from the square
--pacman and ghost are the unique player and ghost 
--x and y are its coordinates on the square
MODULE square(pacman,ghost,x,y,u,d,l,r)
	-- TODO do something here, probably related to coins ;-)
	VAR
		contains_coin : boolean;
		
	DEFINE
		pacmanHere := pacman.x = x & pacman.y = y;
		ghostHere := ghost.x = x & ghost.y = y;
		
	INVAR pacmanHere & u -> pacman.direction != up;
	INVAR pacmanHere & d -> pacman.direction != down;
	INVAR pacmanHere & l -> pacman.direction != left;
	INVAR pacmanHere & r -> pacman.direction != right;
	
	INVAR ghostHere & u -> ghost.direction != up;
	INVAR ghostHere & d -> ghost.direction != down;
	INVAR ghostHere & l -> ghost.direction != left;
	INVAR ghostHere & r -> ghost.direction != right;
	
	--Muntjes kunnen niet terug verschijnen: als er ergens geen muntje ligt, dan zal in de toekomomst er nooit nog een muntje liggen.
--	SPEC AG (!contains_coin -> AX !contains_coin)
		
	ASSIGN
		-- init(contains_coin) := {TRUE, FALSE}; -- implied (remove in final version, just reminder for myself)
		init(contains_coin) := !pacmanHere;
		
		next(contains_coin) :=
			case
				!contains_coin : FALSE;
				next(pacman.x) = x & next(pacman.y = y) : FALSE;
				TRUE : TRUE;
			esac;
				