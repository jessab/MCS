/**
 * Title: An IDP source file for pacman
 */

vocabulary PacmanVoc{
        
        type time isa int
        //Only use Start and Next in your theories, never hardcode integer timepoints!
        Start: time
        partial Next(time):time
        
        
        type dir //We guarantee you that dir, Left, Right, Up, Down will always be correctly interpreted in structures. You should not check this.
        Down: dir
        Left: dir
        Right: dir
        Up: dir

        type xCo isa int
        type yCo isa int

        type agent //The ghosts and pacman
        pacman:agent
        
        // fluents
        Position(time, agent, xCo, yCo)
        I_position(agent, xCo, yCo)                //Initial positions of agents
        C_position(time, agent, xCo, yCo)
        Cn_position(time, agent, xCo, yCo)
                
        Gold(time, xCo, yCo)
        I_gold(xCo, yCo)                            //Initial gold location
        //C_gold(time, xCo, yCo)					//niet nodig want goud kan niet ontstaan
        Cn_gold(time, xCo, yCo)
        
        GameLost(time)
        C_gameLost(time)
        GameWon(time)
        C_gameWon(time)
        
        
        // action
        Move(time, agent, dir)
        
        // invariable
        Pos(xCo,yCo)
        Wall(xCo,yCo,dir)
        
        // syntactic sugar
        PreviousMove(time,agent,dir)
        OppositeDir(dir):dir
        Transition(dir,xCo,yCo,xCo,yCo)
        Edge(xCo,yCo,xCo,yCo,dir)
        Reach(xCo,yCo,xCo,yCo)
        NoPos(xCo,yCo)
        GameEnded(time)
        DeadEnd(time)
        Crossed(time)
        Caught(time)
}

theory TimeTheory:PacmanVoc{
        {
                Start = MIN[:time].
                !t: Next(t) = t+1 <- time(t+1).
        }
}



theory PacmanTheory:PacmanVoc{
	
	//////////////////////////////////
	// DEFINITIES (syntactic sugar) //
	//////////////////////////////////
	
        // OppositeDirection, uitdrukken dat twee richtingen elkaars tegengestelden zijn
        OppositeDir(Left)=Right.
        OppositeDir(Up)=Down.
        !d[dir]:OppositeDir(OppositeDir(d))=d.
        
        // Transition, de relatie tussen verandering van coordinaten en richting.
        // Impliciet, wanneer er een transition bestaat, liggen twee vakjes naast elkaar.
        {
                !x1[xCo], y1[yCo], x2[xCo], y2[yCo]: Transition(Down ,x1,y1,x2,y2) <- x2=x1 & y2=-1+y1.
                !x1[xCo], y1[yCo], x2[xCo], y2[yCo]: Transition(Left ,x1,y1,x2,y2) <- x2=-1+x1 & y2=y1.
                !x1[xCo], y1[yCo], x2[xCo], y2[yCo]: Transition(Up   ,x1,y1,x2,y2) <- x2=x1 & y2= 1+y1.
                !x1[xCo], y1[yCo], x2[xCo], y2[yCo]: Transition(Right,x1,y1,x2,y2) <- x2= 1+x1 & y2=y1.
        }
        
		// Pos: Een positie waar wel een vakje is
        !x[xCo],y[yCo]:Pos(x,y)<=>~NoPos(x,y).
        
        // Edge definieren als 2 vakjes die direct bereikbaar zijn via elkaar
        {
                ! x1[xCo],y1[yCo],x2[xCo],y2[yCo],d[dir] : Edge(x1,y1,x2,y2,d) <- //2 vakjes zijn onderling bereikbaar volgens een richting als:
						Pos(x1,y1) & Pos(x2,y2)		//Beide vakjes betreedbare posities zijn,
                		& Transition(d,x1,y1,x2,y2) //Ze naast elkaar liggen volgens die richting,
                		& ~Wall(x1,y1,d)
                		& ~Wall(x2,y2,OppositeDir(d)).
        }
        
        
        // pacman is gepakt door een geest
        !t[time]:Caught(t)<=>? x[xCo],y[yCo], a[agent]: Position(t,pacman,x,y) & Position(t,a,x,y) & ~a=pacman.
        
        // kruisen van spook en pacman
    	!t[time] : Crossed(t) <=> ?a[agent] x1[xCo] y1[yCo] x2[xCo] y2[yCo] d[dir]: 
    		~a=pacman //pacman en spook
			& Position(t,pacman,x1,y1) & Position(t,a,x2,y2) //staan op bepaalde positities op tijdstip t
			& Edge(x1,y1,x2,y2,d) //De posities liggen naast elkaar volgens richting d
    		& PreviousMove(t,pacman,OppositeDir(d)) & PreviousMove(t,a,d). // verwisselen van positie in volgend tijdstip
        
                
		// Doodlopende Gangen
		!t[time] : DeadEnd(t) <=> ?a[agent] x[xCo] y[yCo]:
        	~a=pacman & Position(t,a,x,y)	//het is een geest op positie (x,y)
        	& #{d[dir],x1[xCo],y1[yCo]:Edge(x,y,x1,y1,d)}=1. //Er is maar 1 toegang tot die positie 
                
        // GameEnded: Het spel is gedaan, het is verloren of gewonnen
        !t[time]:GameEnded(t)<=>GameLost(t)|GameWon(t).
        
        {	// PreviousMove
        	!a[agent] d[dir] t[time]: PreviousMove(Next(t),a,d) <- Move(t,a,d).
        }
        
        

	//////////////////////////////
	// INVARIABELE PRECONDITIES //
	//////////////////////////////
	
        // Alle vakjes zijn aaneengesloten
                //Reach: 2 vakjes kunnen elkaar bereiken via aaneenliggende vakjes die deel 
                //       zijn van het spel (Pos) en waar geen muur tussen staat.
        {
                        // Een vakje dat deel is van het spel kan zichzelf bereiken
                ! x[xCo],y[yCo] : Reach(x,y,x,y) <-Pos(x,y).
                // Als een vakje de direct bereikbare buur van een ander vakje kan bereiken, is dat vakje ook bereikbaar.
                ! x1[xCo],y1[yCo],x2[xCo],y2[yCo] : Reach(x1,y1,x2,y2) <- ?x3[xCo],y3[yCo],d[dir]:Edge(x1,y1,x3,y3,d)&Reach(x3,y3,x2,y2).
        }
                // Alle vakjes die deel zijn van het spel (Pos) kunnen elkaar bereiken
        ?x1[xCo],y1[yCo]: Pos(x1,y1) & (!x2[xCo],y2[yCo]:Pos(x2,y2)=>Reach(x1,y1,x2,y2)).
        
        
     ///////////////////  
     // PRECONDITIES  //
     ///////////////////
     
        // Iedereen is op exact 1 plaats
        !t[time],a[agent]:#{x[xCo] y[yCo] : Position(t,a,x,y)}=1.
        
		// Iedereen kan hoogstens in 1 richting tegelijk bewegen
        !t[time],a[agent]:#{d[dir] : Move(t,a,d)} < 2.
                                
        // Niemand staat op plaatsen waar geen vakje is
        !t[time],a[agent],x[xCo],y[yCo]:Position(t,a,x,y)=>Pos(x,y).
        
        // Er kan enkel goud liggen op plaatsen waar een vakje is
        !t[time],x[xCo],y[yCo] : Gold(t,x,y) => Pos(x,y).
        
        //Niemand beweegt door muren of van het bord af. Maw, Er mag enkel tussen onderling direct bereikbare vakjes bewogen worden.
        !t[time] x[xCo] y[yCo] a[agent] d[dir]: Move(t,a,d) & Position(t,a,x,y)=>
        				?x1[xCo] y1[yCo]: Edge(x,y,x1,y1,d).
        
        // Ghosts kunnen niet omkeren
        ! t[time],a[agent],d [dir], prevD[dir] : a=pacman | ( Move(t,a,d) & PreviousMove(t,a,prevD)=>~prevD=OppositeDir(d)).
 		
        // Afhankelijk van of het spel al gedaan is moet iedereen bewegen/mag niemand bewegen
        !t[time]:GameEnded(t)<=>~?a[agent],d[dir]:Move(t,a,d).
        !t[time]:~GameEnded(t)<=>!a[agent]:?d[dir]:Move(t,a,d).
        
        

        ////////////////////////////////////////////
        // SUCCESSOR STATE ACTION AXION & INERTIA //
        ////////////////////////////////////////////

        {	//Position
			!a[agent] x[xCo] y[yCo]: Position(Start,a,x,y) <- I_position(a,x,y).
			!a[agent] x[xCo] y[yCo] t[time]: Position(Next(t),a,x,y) <- C_position(t,a,x,y).
			!a[agent] x[xCo] y[yCo] t[time]: Position(Next(t),a,x,y) <- (Position(t,a,x,y) & ~Cn_position(t,a,x,y)).
		}
		{	//Gold
			!x[xCo] y[yCo] : Gold(Start,x,y) <- I_gold(x,y).
			!x[xCo] y[yCo] t[time] : Gold(Next(t),x,y) <- Gold(t,x,y) & ~Cn_gold(t,x,y).
        }
			
        {	// GameLost
        	!t[time]: GameLost(t) <- C_gameLost(t).
        	!t[time]: GameLost(Next(t)) <- GameLost(t).
        }	
        {	// GameWon
        	!t[time]: GameWon(t) <- C_gameWon(t).
        	!t[time]: GameWon(Next(t)) <- GameWon(t).
        }
        

		////////////
		// CAUSES //
		////////////
		
        {   // Position     
        	!a[agent] x[xCo] y[yCo] t[time] : C_position(t,a,x,y) <- ? x1[xCo] y1[yCo] d[dir]: Position(t,a,x1,y1) & Move(t,a,d) & Edge(x1,y1,x,y,d).
        	!a[agent] x[xCo] y[yCo] t[time] : Cn_position(t,a,x,y) <- ?d[dir]: Position(t,a,x,y) & Move(t,a,d).
        }
        {	// Gold
        	!x[xCo] y[yCo] t[time] : Cn_gold(t,x,y) <- Position(t,pacman,x,y) & ?d[dir]:Move(t,pacman,d).
        }
        {	// WIN & LOSE
        	!t[time] : C_gameWon(t) <- ~C_gameLost(t)  // het spel is niet verloren
        								& (~ (? x[xCo],y[yCo] : Gold(t,x,y))  // en er is geen goud meer
        								| DeadEnd(t)).  // of er zit een spook in een doodlopende gang
			!t[time] : C_gameLost(t) <- Caught(t) //pacman en ghost op zelfde positie
        								| Crossed(t). // of ze zijn elkaar gekruisd		
        }
                
}

theory verification1: PacmanVoc{
        // Te verifieren: Het aantal muntstukken op het bord kan enkel omlaag gaan
        // Contradictie: Voorwaarde toevoegen dat er een tijd bestaat waar het aantal muntstukken omhoog gaat
        
        ?t1[time] t2[time] x[xCo] y[yCo]: t2 = Next(t1) & ~Gold(t1,x,y) & Gold(t2,x,y).        

}

procedure verification1proc(struc){
        //Do something here: verify verification1 in the context of structure struc. 
        //At least print whether the verification is satisified or not.
	    T = merge(TimeTheory,PacmanTheory)
        TT = merge(T,verification1)
		if sat(TT, struc) then
			print("nok: het aantal muntstukken op een bord kan stijgen")
		else
			print("ok: het aantal muntstukken op een bord kan enkel omlaag gaan")
		end
}

theory verification2: PacmanVoc{
        // Te verifieren: als het spel ten einde is, blijft het ten einde
        // Contradictie: Voorwaarde toevoegen dat het spel ten einde is en daarna niet meer
        ?t1[time] t2[time] : GameEnded(t1) & ~GameEnded(t2) & t2=Next(t1).
}

procedure verification2proc(struc){
        //Do something here: verify verification2 in the context of structure struc. 
        //At least print whether the verification is satisified or not.
	    T = merge(TimeTheory,PacmanTheory)
        TT = merge(T,verification2)

		if sat(TT, struc) then
			print("nok: Als het spel ten einde is, blijft dat niet per se zo")
			printmodels(models)
		else
			print("ok: als het spel ten einde is, blijft het ten einde")
		end
}

theory verification3: PacmanVoc{
        // Te verifieren: het is mogelijk om het spel te winnen;
        // Voorwaarde toevoegen dat het spel gewonnen wordt. Daar moet minstens 1 model voor bestaan
        ?t[time] : GameWon(t).
}

procedure verification3proc(struc){
        //Do something here: verify verification3 in the context of structure struc. 
        //At least print whether the verification is satisified or not.
	    T = merge(TimeTheory,PacmanTheory)
        TT = merge(T,verification3)
		if sat(TT, struc) then
			print("ok: Het is mogelijk het spel te winnen")
		else
			print("nok: Het is onmogelijk het spel te winnen")
		end
}

theory verification4: PacmanVoc{
        //Te verifieren : het is mogelijk om het spel te verliezen.
        // Voorwaarde toevoegen dat het spel verloren wordt. Daar moet minstens 1 model voor bestaan
        ?t[time] : GameLost(t).
}

procedure verification4proc(struc){
        //Do something here: verify verification4 in the context of structure struc. 
        //At least print whether the verification is satisified or not.
	    T = merge(TimeTheory,PacmanTheory)
        TT = merge(T,verification4)
		if sat(TT, struc) then
			print("ok: Het is mogelijk het spel te verliezen")
		else
			print("nok: Het is onmogelijk het spel te verliezen")
			printcore(TT, struc) 
		end
}

procedure allVerifications(){
        strucToCheck = verStruc
        verification1proc(strucToCheck)
        verification2proc(strucToCheck)
        verification3proc(strucToCheck)
        verification4proc(strucToCheck)

}

//procedure main(){
//	allVerifications()
//}

structure verStruc: PacmanVoc{
        
        time={0..50}
        dir = {u;d;l;r}
        Up=u
        Down=d
        Left=l
        Right=r

        xCo = {1..5}
        yCo = {1..5}

        pacman=p
        agent={p; blinky; }

        NoPos = {1,1; 1,2;  4,2; 4,3; }
        I_position={p,1,3; blinky, 4,4}

        Wall = {2,2,u;2,3,r;3,2,d;4,4,u;1,4,r;2,4,u}
        
        I_gold<cf> = {1,1; 1,2; 4,2; 4,3; 5,5 }
        I_gold<u> = { }
                
}